// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/entities/hashtag_entity.dart';
import 'models/entities/record_entity_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7079185567296412889),
      name: 'RecordEntityModel',
      lastPropertyId: const obx_int.IdUid(7, 5483501053360421449),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5267073488305540592),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2618916769886776451),
            name: 'amount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5259670208258169432),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6046478714404658601),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4798397128356176290),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5483501053360421449),
            name: 'type',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 8400700663430999727),
            name: 'hashtags',
            targetId: const obx_int.IdUid(2, 6395373326551313019))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6395373326551313019),
      name: 'HashtagEntity',
      lastPropertyId: const obx_int.IdUid(2, 4394508335109483375),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6254594628705776353),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4394508335109483375),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 6395373326551313019),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 8400700663430999727),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8177230251087251746],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    RecordEntityModel: obx_int.EntityDefinition<RecordEntityModel>(
        model: _entities[0],
        toOneRelations: (RecordEntityModel object) => [],
        toManyRelations: (RecordEntityModel object) => {
              obx_int.RelInfo<RecordEntityModel>.toMany(1, object.id):
                  object.hashtags
            },
        getId: (RecordEntityModel object) => object.id,
        setId: (RecordEntityModel object, int id) {
          object.id = id;
        },
        objectToFB: (RecordEntityModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.amount);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.date.millisecondsSinceEpoch);
          fbb.addInt64(6, object.type);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final typeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final amountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final hashtagsParam = obx.ToMany<HashtagEntity>();
          final object = RecordEntityModel(
              id: idParam,
              type: typeParam,
              amount: amountParam,
              title: titleParam,
              description: descriptionParam,
              date: dateParam,
              hashtags: hashtagsParam);
          obx_int.InternalToManyAccess.setRelInfo<RecordEntityModel>(
              object.hashtags,
              store,
              obx_int.RelInfo<RecordEntityModel>.toMany(1, object.id));
          return object;
        }),
    HashtagEntity: obx_int.EntityDefinition<HashtagEntity>(
        model: _entities[1],
        toOneRelations: (HashtagEntity object) => [],
        toManyRelations: (HashtagEntity object) => {},
        getId: (HashtagEntity object) => object.id,
        setId: (HashtagEntity object, int id) {
          object.id = id;
        },
        objectToFB: (HashtagEntity object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = HashtagEntity(id: idParam, name: nameParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [RecordEntityModel] entity fields to define ObjectBox queries.
class RecordEntityModel_ {
  /// See [RecordEntityModel.id].
  static final id =
      obx.QueryIntegerProperty<RecordEntityModel>(_entities[0].properties[0]);

  /// See [RecordEntityModel.amount].
  static final amount =
      obx.QueryIntegerProperty<RecordEntityModel>(_entities[0].properties[1]);

  /// See [RecordEntityModel.title].
  static final title =
      obx.QueryStringProperty<RecordEntityModel>(_entities[0].properties[2]);

  /// See [RecordEntityModel.description].
  static final description =
      obx.QueryStringProperty<RecordEntityModel>(_entities[0].properties[3]);

  /// See [RecordEntityModel.date].
  static final date =
      obx.QueryDateProperty<RecordEntityModel>(_entities[0].properties[4]);

  /// See [RecordEntityModel.type].
  static final type =
      obx.QueryIntegerProperty<RecordEntityModel>(_entities[0].properties[5]);

  /// see [RecordEntityModel.hashtags]
  static final hashtags =
      obx.QueryRelationToMany<RecordEntityModel, HashtagEntity>(
          _entities[0].relations[0]);
}

/// [HashtagEntity] entity fields to define ObjectBox queries.
class HashtagEntity_ {
  /// See [HashtagEntity.id].
  static final id =
      obx.QueryIntegerProperty<HashtagEntity>(_entities[1].properties[0]);

  /// See [HashtagEntity.name].
  static final name =
      obx.QueryStringProperty<HashtagEntity>(_entities[1].properties[1]);
}
